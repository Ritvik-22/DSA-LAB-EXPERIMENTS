#include <stdio.h>  
#include <stdlib.h>  
   
#define MAX 3  
#define MIN 2  

struct btree_node {  
  int data_item[MAX + 1], counter;  
  struct btree_node *the_link[MAX + 1];  
};  
  
struct btree_node *root_node;  
    
struct btree_node *create_node(int data_item, struct btree_node *child_node) {  
  struct btree_node *new_node;  
  new_node = (struct btree_node *)malloc(sizeof(struct btree_node));  
  new_node -> data_item[1] = data_item;  
  new_node -> counter = 1;  
  new_node -> the_link[0] = root_node;  
  new_node -> the_link[1] = child_node;  
  return new_node;  
}  
    
void insert_value(int data_item, int position, struct btree_node *the_node,  
          struct btree_node *child_node) {  
  int j = the_node -> counter;  
  while (j > position) {  
    the_node -> data_item[j + 1] = the_node -> data_item[j];  
    the_node -> the_link[j + 1] = the_node -> the_link[j];  
    j--;  
  }  
  the_node -> data_item[j + 1] = data_item;  
  the_node -> the_link[j + 1] = child_node;  
  the_node -> counter++;  
}  
   
void splitNode(int data_item, int *p_value, int position, struct btree_node *the_node,  
         struct btree_node *child_node, struct btree_node **new_node) {  
  int median_key, j;  
  
  if (position > MIN)  
    median_key = MIN + 1;  
  else  
    median_key = MIN;  
  
  *new_node = (struct btree_node *)malloc(sizeof(struct btree_node));  
  j = median_key + 1;  
  while (j <= MAX) {  
    (*new_node)->data_item[j - median_key] = the_node -> data_item[j];  
    (*new_node)->the_link[j - median_key] = the_node -> the_link[j];  
    j++;  
  }  
  the_node -> counter = median_key;  
  (*new_node) -> counter = MAX - median_key;  
  
  if (position <= MIN) {  
    insert_value(data_item, position, the_node, child_node);  
  } else {  
    insert_value(data_item, position - median_key, *new_node, child_node);  
  }  
  *p_value = the_node -> data_item[the_node->counter];  
  (*new_node) -> the_link[0] = the_node -> the_link[the_node->counter];  
  the_node -> counter--;  
}  
  
int set_node_value(int data_item, int *p_value,  
           struct btree_node *the_node, struct btree_node **child_node) {  
  int position;  
  if (!the_node) {  
    *p_value = data_item;  
    *child_node = NULL;  
    return 1;  
  }  
  
  if (data_item < the_node -> data_item[1]) {  
    position = 0;  
  } else {  
    for (position = the_node -> counter;  
       (data_item < the_node -> data_item[position] && position > 1); position--)  
      ;  
    if (data_item == the_node -> data_item[position]) {  
      printf("Duplicates are not allowed\n");  
      return 0;  
    }  
  }  
  if (set_node_value(data_item, p_value, the_node->the_link[position], child_node)) {  
    if (the_node->counter < MAX) {  
      insert_value(*p_value, position, the_node, *child_node);  
    } else {  
      splitNode(*p_value, p_value, position, the_node, *child_node, child_node);  
      return 1;  
    }  
  }  
  return 0;  
}  
  
void insertion_operation(int data_item) {  
  int the_flag, i;  
  struct btree_node *child_node;  
  
  the_flag = set_node_value(data_item, &i, root_node, &child_node);  
  if (the_flag)  
    root_node = create_node(i, child_node);  
}  
 
void copy_successor(struct btree_node *my_node, int position) {  
  struct btree_node *dummy_node;  
  dummy_node = my_node -> the_link[position];  
  
  for (; dummy_node -> the_link[0] != NULL;)  
    dummy_node = dummy_node -> the_link[0];  
  my_node -> data_item[position] = dummy_node -> data_item[1];  
}  
 
void right_shift(struct btree_node *my_node, int position) {  
  struct btree_node *x = my_node -> the_link[position];  
  int j = x -> counter;  
  
  while (j > 0) {  
    x -> data_item[j + 1] = x -> data_item[j];  
    x -> the_link[j + 1] = x -> the_link[j];  
  }  
  x -> data_item[1] = my_node->data_item[position];  
  x -> the_link[1] = x->the_link[0];  
  x -> counter++;  
  
  x = my_node -> the_link[position - 1];  
  my_node -> data_item[position] = x -> data_item[x -> counter];  
  my_node -> the_link[position] = x -> the_link[x -> counter];  
  x -> counter--;  
  return;  
}  
  
void left_shift(struct btree_node *my_node, int position) {  
  int j = 1;  
  struct btree_node *x = my_node -> the_link[position - 1];  
  
  x -> counter++;  
  x -> data_item[x -> counter] = my_node -> data_item[position];  
  x -> the_link[x -> counter] = my_node -> the_link[position] -> the_link[0];  
  
  x = my_node -> the_link[position];  
  my_node -> data_item[position] = x -> data_item[1];  
  x -> the_link[0] = x -> the_link[1];  
  x -> counter--;  
  
  while (j <= x -> counter) {  
    x -> data_item[j] = x -> data_item[j + 1];  
    x -> the_link[j] = x -> the_link[j + 1];  
    j++;  
  }  
  return;  
}  
  
void merge_nodes(struct btree_node *my_node, int position) {  
  int j = 1;  
  struct btree_node *x1 = my_node -> the_link[position], *x2 = my_node -> the_link[position - 1];  
  
  x2 -> counter++;  
  x2 -> data_item[x2 -> counter] = my_node -> data_item[position];  
  x2 -> the_link[x2 -> counter] = my_node -> the_link[0];  
  
  while (j <= x1 -> counter) {  
    x2 -> counter++;  
    x2 -> data_item[x2 -> counter] = x1 -> data_item[j];  
    x2 -> the_link[x2 -> counter] = x1 -> the_link[j];  
    j++;  
  }  
  
  j = position;  
  while (j < my_node -> counter) {  
    my_node -> data_item[j] = my_node -> data_item[j + 1];  
    my_node -> the_link[j] = my_node -> the_link[j + 1];  
    j++;  
  }  
  my_node -> counter--;  
  free(x1);  
}  
  
// adjusting the node  
void adjustNode(struct btree_node *my_node, int position) {  
  if (!position) {  
    if (my_node -> the_link[1] -> counter > MIN) {  
      left_shift(my_node, 1);  
    } else {  
      merge_nodes(my_node, 1);  
    }  
  } else {  
    if (my_node -> counter != position) {  
      if (my_node -> the_link[position - 1] -> counter > MIN) {  
        right_shift(my_node, position);  
      } else {  
        if (my_node -> the_link[position + 1] -> counter > MIN) {  
          left_shift(my_node, position + 1);  
        } else {  
          merge_nodes(my_node, position);  
        }  
      }  
    } else {  
      if (my_node -> the_link[position - 1] -> counter > MIN)  
        right_shift(my_node, position);  
      else  
        merge_nodes(my_node, position);  
    }  
  }  
}  
  
void tree_traversal(struct btree_node *my_node) {  
  int i;  
  if (my_node) {  
    for (i = 0; i < my_node -> counter; i++) {  
      tree_traversal(my_node -> the_link[i]);  
      printf("%d ", my_node -> data_item[i + 1]);  
    }  
    tree_traversal(my_node -> the_link[i]);  
  }  
}  
   
int main() {  
  int data_item, ch;  
  
  insertion_operation(4);  
  insertion_operation(6);  
  insertion_operation(2);  
  insertion_operation(8);  
  insertion_operation(10);  
  insertion_operation(9);  
  insertion_operation(1);  
  insertion_operation(3);  
  insertion_operation(12);  
  insertion_operation(11);  
  insertion_operation(13);  
  
  printf("The B Tree is : ");  
  tree_traversal(root_node);  
}
